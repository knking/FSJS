{"ast":null,"code":"import { useEffect } from 'react';\nfunction addDomEvent(target, eventName, handler, options) {\n  if (options === void 0) {\n    options = {\n      passive: true\n    };\n  }\n  target.addEventListener(eventName, handler, options);\n  return function () {\n    return target.removeEventListener(eventName, handler);\n  };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n  useEffect(function () {\n    var element = ref.current;\n    if (handler && element) {\n      return addDomEvent(element, eventName, handler, options);\n    }\n  }, [ref, eventName, handler, options]);\n}\nexport { addDomEvent, useDomEvent };","map":{"version":3,"names":["useEffect","addDomEvent","target","eventName","handler","options","passive","addEventListener","removeEventListener","useDomEvent","ref","element","current"],"sources":["C:/Users/hp/Desktop/JavaScript_fullstack_webDev/React/youtube/project2/node_modules/framer-motion/dist/es/events/use-dom-event.mjs"],"sourcesContent":["import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n    if (options === void 0) { options = { passive: true }; }\n    target.addEventListener(eventName, handler, options);\n    return function () { return target.removeEventListener(eventName, handler); };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(function () {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,WAAWA,CAACC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACtD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG;MAAEC,OAAO,EAAE;IAAK,CAAC;EAAE;EACvDJ,MAAM,CAACK,gBAAgB,CAACJ,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC;EACpD,OAAO,YAAY;IAAE,OAAOH,MAAM,CAACM,mBAAmB,CAACL,SAAS,EAAEC,OAAO,CAAC;EAAE,CAAC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,WAAWA,CAACC,GAAG,EAAEP,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACnDL,SAAS,CAAC,YAAY;IAClB,IAAIW,OAAO,GAAGD,GAAG,CAACE,OAAO;IACzB,IAAIR,OAAO,IAAIO,OAAO,EAAE;MACpB,OAAOV,WAAW,CAACU,OAAO,EAAER,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC;IAC5D;EACJ,CAAC,EAAE,CAACK,GAAG,EAAEP,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAC;AAC1C;AAEA,SAASJ,WAAW,EAAEQ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}