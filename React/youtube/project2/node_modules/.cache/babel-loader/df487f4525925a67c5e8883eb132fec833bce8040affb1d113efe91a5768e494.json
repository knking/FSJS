{"ast":null,"code":"import { __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\nvar VisualElementDragControls = /** @class */function () {\n  function VisualElementDragControls(visualElement) {\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n  VisualElementDragControls.prototype.start = function (originEvent, _a) {\n    var _this = this;\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.snapToCursor,\n      snapToCursor = _c === void 0 ? false : _c;\n    /**\n     * Don't start dragging if this component is exiting\n     */\n    if (this.visualElement.isPresent === false) return;\n    var onSessionStart = function (event) {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      _this.stopAnimation();\n      if (snapToCursor) {\n        _this.snapToCursor(extractEventInfo(event, \"page\").point);\n      }\n    };\n    var onStart = function (event, info) {\n      var _a;\n      // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n      var _b = _this.getProps(),\n        drag = _b.drag,\n        dragPropagation = _b.dragPropagation,\n        onDragStart = _b.onDragStart;\n      if (drag && !dragPropagation) {\n        if (_this.openGlobalLock) _this.openGlobalLock();\n        _this.openGlobalLock = getGlobalLock(drag);\n        // If we don 't have the lock, don't start dragging\n        if (!_this.openGlobalLock) return;\n      }\n      _this.isDragging = true;\n      _this.currentDirection = null;\n      _this.resolveConstraints();\n      if (_this.visualElement.projection) {\n        _this.visualElement.projection.isAnimationBlocked = true;\n        _this.visualElement.projection.target = undefined;\n      }\n      /**\n       * Record gesture origin\n       */\n      eachAxis(function (axis) {\n        var _a, _b;\n        var current = _this.getAxisMotionValue(axis).get() || 0;\n        /**\n         * If the MotionValue is a percentage value convert to px\n         */\n        if (percent.test(current)) {\n          var measuredAxis = (_b = (_a = _this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n          if (measuredAxis) {\n            var length_1 = calcLength(measuredAxis);\n            current = length_1 * (parseFloat(current) / 100);\n          }\n        }\n        _this.originPoint[axis] = current;\n      });\n      // Fire onDragStart event\n      onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n      (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n    };\n    var onMove = function (event, info) {\n      // latestPointerEvent = event\n      var _a = _this.getProps(),\n        dragPropagation = _a.dragPropagation,\n        dragDirectionLock = _a.dragDirectionLock,\n        onDirectionLock = _a.onDirectionLock,\n        onDrag = _a.onDrag;\n      // If we didn't successfully receive the gesture lock, early return.\n      if (!dragPropagation && !_this.openGlobalLock) return;\n      var offset = info.offset;\n      // Attempt to detect drag direction if directionLock is true\n      if (dragDirectionLock && _this.currentDirection === null) {\n        _this.currentDirection = getCurrentDirection(offset);\n        // If we've successfully set a direction, notify listener\n        if (_this.currentDirection !== null) {\n          onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n        }\n        return;\n      }\n      // Update each point with the latest position\n      _this.updateAxis(\"x\", info.point, offset);\n      _this.updateAxis(\"y\", info.point, offset);\n      /**\n       * Ideally we would leave the renderer to fire naturally at the end of\n       * this frame but if the element is about to change layout as the result\n       * of a re-render we want to ensure the browser can read the latest\n       * bounding box to ensure the pointer and element don't fall out of sync.\n       */\n      _this.visualElement.syncRender();\n      /**\n       * This must fire after the syncRender call as it might trigger a state\n       * change which itself might trigger a layout update.\n       */\n      onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n    };\n    var onSessionEnd = function (event, info) {\n      return _this.stop(event, info);\n    };\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart: onSessionStart,\n      onStart: onStart,\n      onMove: onMove,\n      onSessionEnd: onSessionEnd\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint()\n    });\n  };\n  VisualElementDragControls.prototype.stop = function (event, info) {\n    var isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    var velocity = info.velocity;\n    this.startAnimation(velocity);\n    var onDragEnd = this.getProps().onDragEnd;\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n  };\n  VisualElementDragControls.prototype.cancel = function () {\n    var _a, _b;\n    this.isDragging = false;\n    if (this.visualElement.projection) {\n      this.visualElement.projection.isAnimationBlocked = false;\n    }\n    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n    this.panSession = undefined;\n    var dragPropagation = this.getProps().dragPropagation;\n    if (!dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n  };\n  VisualElementDragControls.prototype.updateAxis = function (axis, _point, offset) {\n    var drag = this.getProps().drag;\n    // If we're not dragging this axis, do an early return.\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    var axisValue = this.getAxisMotionValue(axis);\n    var next = this.originPoint[axis] + offset[axis];\n    // Apply constraints\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n    axisValue.set(next);\n  };\n  VisualElementDragControls.prototype.resolveConstraints = function () {\n    var _this = this;\n    var _a = this.getProps(),\n      dragConstraints = _a.dragConstraints,\n      dragElastic = _a.dragElastic;\n    var layout = (this.visualElement.projection || {}).layout;\n    var prevConstraints = this.constraints;\n    if (dragConstraints && isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(function (axis) {\n        if (_this.getAxisMotionValue(axis)) {\n          _this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this.constraints[axis]);\n        }\n      });\n    }\n  };\n  VisualElementDragControls.prototype.resolveRefConstraints = function () {\n    var _a = this.getProps(),\n      constraints = _a.dragConstraints,\n      onMeasureDragConstraints = _a.onMeasureDragConstraints;\n    if (!constraints || !isRefObject(constraints)) return false;\n    var constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    var projection = this.visualElement.projection;\n    // TODO\n    if (!projection || !projection.layout) return false;\n    var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n    if (onMeasureDragConstraints) {\n      var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToBox(userConstraints);\n      }\n    }\n    return measuredConstraints;\n  };\n  VisualElementDragControls.prototype.startAnimation = function (velocity) {\n    var _this = this;\n    var _a = this.getProps(),\n      drag = _a.drag,\n      dragMomentum = _a.dragMomentum,\n      dragElastic = _a.dragElastic,\n      dragTransition = _a.dragTransition,\n      dragSnapToOrigin = _a.dragSnapToOrigin,\n      onDragTransitionEnd = _a.onDragTransitionEnd;\n    var constraints = this.constraints || {};\n    var momentumAnimations = eachAxis(function (axis) {\n      var _a;\n      if (!shouldDrag(axis, drag, _this.currentDirection)) {\n        return;\n      }\n      var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n      var bounceStiffness = dragElastic ? 200 : 1000000;\n      var bounceDamping = dragElastic ? 40 : 10000000;\n      var inertia = __assign(__assign({\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness: bounceStiffness,\n        bounceDamping: bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10\n      }, dragTransition), transition);\n      // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n      return _this.startAxisValueAnimation(axis, inertia);\n    });\n    // Run all animations and then resolve the new drag constraints.\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  };\n  VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n    var axisValue = this.getAxisMotionValue(axis);\n    return startAnimation(axis, axisValue, 0, transition);\n  };\n  VisualElementDragControls.prototype.stopAnimation = function () {\n    var _this = this;\n    eachAxis(function (axis) {\n      return _this.getAxisMotionValue(axis).stop();\n    });\n  };\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n  VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n    var _a, _b;\n    var dragKey = \"_drag\" + axis.toUpperCase();\n    var externalMotionValue = this.visualElement.getProps()[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n  };\n  VisualElementDragControls.prototype.snapToCursor = function (point) {\n    var _this = this;\n    eachAxis(function (axis) {\n      var drag = _this.getProps().drag;\n      // If we're not dragging this axis, do an early return.\n      if (!shouldDrag(axis, drag, _this.currentDirection)) return;\n      var projection = _this.visualElement.projection;\n      var axisValue = _this.getAxisMotionValue(axis);\n      if (projection && projection.layout) {\n        var _a = projection.layout.actual[axis],\n          min = _a.min,\n          max = _a.max;\n        axisValue.set(point[axis] - mix(min, max, 0.5));\n      }\n    });\n  };\n  /**\n   * When the viewport resizes we want to check if the measured constraints\n   * have changed and, if so, reposition the element within those new constraints\n   * relative to where it was before the resize.\n   */\n  VisualElementDragControls.prototype.scalePositionWithinConstraints = function () {\n    var _this = this;\n    var _a;\n    var _b = this.getProps(),\n      drag = _b.drag,\n      dragConstraints = _b.dragConstraints;\n    var projection = this.visualElement.projection;\n    if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\n     * Stop current animations as there can be visual glitching if we try to do\n     * this mid-animation\n     */\n    this.stopAnimation();\n    /**\n     * Record the relative position of the dragged element relative to the\n     * constraints box and save as a progress value.\n     */\n    var boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(function (axis) {\n      var axisValue = _this.getAxisMotionValue(axis);\n      if (axisValue) {\n        var latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, _this.constraints[axis]);\n      }\n    });\n    /**\n     * Update the layout of this element and resolve the latest drag constraints\n     */\n    var transformTemplate = this.visualElement.getProps().transformTemplate;\n    this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\n     * For each axis, calculate the current progress of the layout axis\n     * within the new constraints.\n     */\n    eachAxis(function (axis) {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\n       * Calculate a new transform based on the previous box progress\n       */\n      var axisValue = _this.getAxisMotionValue(axis);\n      var _a = _this.constraints[axis],\n        min = _a.min,\n        max = _a.max;\n      axisValue.set(mix(min, max, boxProgress[axis]));\n    });\n  };\n  VisualElementDragControls.prototype.addListeners = function () {\n    var _this = this;\n    var _a;\n    elementDragControls.set(this.visualElement, this);\n    var element = this.visualElement.getInstance();\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n    var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n      var _a = _this.getProps(),\n        drag = _a.drag,\n        _b = _a.dragListener,\n        dragListener = _b === void 0 ? true : _b;\n      drag && dragListener && _this.start(event);\n    });\n    var measureDragConstraints = function () {\n      var dragConstraints = _this.getProps().dragConstraints;\n      if (isRefObject(dragConstraints)) {\n        _this.constraints = _this.resolveRefConstraints();\n      }\n    };\n    var projection = this.visualElement.projection;\n    var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n    if (projection && !projection.layout) {\n      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n      projection.updateLayout();\n    }\n    measureDragConstraints();\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n    var stopResizeListener = addDomEvent(window, \"resize\", function () {\n      return _this.scalePositionWithinConstraints();\n    });\n    /**\n     * If the element's layout changes, calculate the delta and apply that to\n     * the drag gesture's origin point.\n     */\n    projection.addEventListener(\"didUpdate\", function (_a) {\n      var delta = _a.delta,\n        hasLayoutChanged = _a.hasLayoutChanged;\n      if (_this.isDragging && hasLayoutChanged) {\n        eachAxis(function (axis) {\n          var motionValue = _this.getAxisMotionValue(axis);\n          if (!motionValue) return;\n          _this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n        _this.visualElement.syncRender();\n      }\n    });\n    return function () {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n    };\n  };\n  VisualElementDragControls.prototype.getProps = function () {\n    var props = this.visualElement.getProps();\n    var _a = props.drag,\n      drag = _a === void 0 ? false : _a,\n      _b = props.dragDirectionLock,\n      dragDirectionLock = _b === void 0 ? false : _b,\n      _c = props.dragPropagation,\n      dragPropagation = _c === void 0 ? false : _c,\n      _d = props.dragConstraints,\n      dragConstraints = _d === void 0 ? false : _d,\n      _e = props.dragElastic,\n      dragElastic = _e === void 0 ? defaultElastic : _e,\n      _f = props.dragMomentum,\n      dragMomentum = _f === void 0 ? true : _f;\n    return __assign(__assign({}, props), {\n      drag: drag,\n      dragDirectionLock: dragDirectionLock,\n      dragPropagation: dragPropagation,\n      dragConstraints: dragConstraints,\n      dragElastic: dragElastic,\n      dragMomentum: dragMomentum\n    });\n  };\n  return VisualElementDragControls;\n}();\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n  if (lockThreshold === void 0) {\n    lockThreshold = 10;\n  }\n  var direction = null;\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n  return direction;\n}\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["__assign","invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","AnimationType","createBox","eachAxis","measurePageBox","extractEventInfo","startAnimation","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","mix","percent","calcLength","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","prototype","start","originEvent","_a","_this","_b","_c","snapToCursor","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","getProps","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","current","getAxisMotionValue","get","test","measuredAxis","layout","actual","length_1","parseFloat","animationState","setActive","Drag","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","syncRender","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","getInstance","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","delta","hasLayoutChanged","motionValue","translate","props","_d","_e","_f","direction","lockThreshold","Math","abs"],"sources":["C:/Users/hp/Desktop/JavaScript_fullstack_webDev/React/youtube/project2/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\nvar VisualElementDragControls = /** @class */ (function () {\n    function VisualElementDragControls(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    VisualElementDragControls.prototype.start = function (originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        if (this.visualElement.isPresent === false)\n            return;\n        var onSessionStart = function (event) {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopAnimation();\n            if (snapToCursor) {\n                _this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        var onStart = function (event, info) {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _b = _this.getProps(), drag = _b.drag, dragPropagation = _b.dragPropagation, onDragStart = _b.onDragStart;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock)\n                    _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock)\n                    return;\n            }\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            _this.resolveConstraints();\n            if (_this.visualElement.projection) {\n                _this.visualElement.projection.isAnimationBlocked = true;\n                _this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis(function (axis) {\n                var _a, _b;\n                var current = _this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    var measuredAxis = (_b = (_a = _this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n                    if (measuredAxis) {\n                        var length_1 = calcLength(measuredAxis);\n                        current = length_1 * (parseFloat(current) / 100);\n                    }\n                }\n                _this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n        };\n        var onMove = function (event, info) {\n            // latestPointerEvent = event\n            var _a = _this.getProps(), dragPropagation = _a.dragPropagation, dragDirectionLock = _a.dragDirectionLock, onDirectionLock = _a.onDirectionLock, onDrag = _a.onDrag;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock)\n                return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", info.point, offset);\n            _this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            _this.visualElement.syncRender();\n            /**\n             * This must fire after the syncRender call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        var onSessionEnd = function (event, info) {\n            return _this.stop(event, info);\n        };\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onSessionEnd: onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    };\n    VisualElementDragControls.prototype.stop = function (event, info) {\n        var isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        var velocity = info.velocity;\n        this.startAnimation(velocity);\n        var onDragEnd = this.getProps().onDragEnd;\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    };\n    VisualElementDragControls.prototype.cancel = function () {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        var dragPropagation = this.getProps().dragPropagation;\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.updateAxis = function (axis, _point, offset) {\n        var drag = this.getProps().drag;\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        var axisValue = this.getAxisMotionValue(axis);\n        var next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    };\n    VisualElementDragControls.prototype.resolveConstraints = function () {\n        var _this = this;\n        var _a = this.getProps(), dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        var layout = (this.visualElement.projection || {}).layout;\n        var prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis(function (axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function () {\n        var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        var constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        var projection = this.visualElement.projection;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.startAnimation = function (velocity) {\n        var _this = this;\n        var _a = this.getProps(), drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;\n        var constraints = this.constraints || {};\n        var momentumAnimations = eachAxis(function (axis) {\n            var _a;\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = __assign(__assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness, bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.stopAnimation = function () {\n        var _this = this;\n        eachAxis(function (axis) { return _this.getAxisMotionValue(axis).stop(); });\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n        var _a, _b;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        var externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function (point) {\n        var _this = this;\n        eachAxis(function (axis) {\n            var drag = _this.getProps().drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection))\n                return;\n            var projection = _this.visualElement.projection;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                var _a = projection.layout.actual[axis], min = _a.min, max = _a.max;\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    };\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    VisualElementDragControls.prototype.scalePositionWithinConstraints = function () {\n        var _this = this;\n        var _a;\n        var _b = this.getProps(), drag = _b.drag, dragConstraints = _b.dragConstraints;\n        var projection = this.visualElement.projection;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        var boxProgress = { x: 0, y: 0 };\n        eachAxis(function (axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, _this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        var transformTemplate = this.visualElement.getProps().transformTemplate;\n        this.visualElement.getInstance().style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis(function (axis) {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            var axisValue = _this.getAxisMotionValue(axis);\n            var _a = _this.constraints[axis], min = _a.min, max = _a.max;\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    };\n    VisualElementDragControls.prototype.addListeners = function () {\n        var _this = this;\n        var _a;\n        elementDragControls.set(this.visualElement, this);\n        var element = this.visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n            var _a = _this.getProps(), drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        var measureDragConstraints = function () {\n            var dragConstraints = _this.getProps().dragConstraints;\n            if (isRefObject(dragConstraints)) {\n                _this.constraints = _this.resolveRefConstraints();\n            }\n        };\n        var projection = this.visualElement.projection;\n        var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        var stopResizeListener = addDomEvent(window, \"resize\", function () {\n            return _this.scalePositionWithinConstraints();\n        });\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        projection.addEventListener(\"didUpdate\", (function (_a) {\n            var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged;\n            if (_this.isDragging && hasLayoutChanged) {\n                eachAxis(function (axis) {\n                    var motionValue = _this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    _this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                _this.visualElement.syncRender();\n            }\n        }));\n        return function () {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n        };\n    };\n    VisualElementDragControls.prototype.getProps = function () {\n        var props = this.visualElement.getProps();\n        var _a = props.drag, drag = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic = _e === void 0 ? defaultElastic : _e, _f = props.dragMomentum, dragMomentum = _f === void 0 ? true : _f;\n        return __assign(__assign({}, props), { drag: drag, dragDirectionLock: dragDirectionLock, dragPropagation: dragPropagation, dragConstraints: dragConstraints, dragElastic: dragElastic, dragMomentum: dragMomentum });\n    };\n    return VisualElementDragControls;\n}());\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) { lockThreshold = 10; }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}