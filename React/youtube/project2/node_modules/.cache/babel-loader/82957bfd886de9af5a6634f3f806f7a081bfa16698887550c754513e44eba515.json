{"ast":null,"code":"import { __read } from 'tslib';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n  point -= translate;\n  point = scalePoint(point, 1 / scale, originPoint);\n  if (boxScale !== undefined) {\n    point = scalePoint(point, 1 / boxScale, originPoint);\n  }\n  return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate, scale, origin, boxScale, originAxis, sourceAxis) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n  if (scale === void 0) {\n    scale = 1;\n  }\n  if (origin === void 0) {\n    origin = 0.5;\n  }\n  if (originAxis === void 0) {\n    originAxis = axis;\n  }\n  if (sourceAxis === void 0) {\n    sourceAxis = axis;\n  }\n  if (percent.test(translate)) {\n    translate = parseFloat(translate);\n    var relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n    translate = relativeProgress - sourceAxis.min;\n  }\n  if (typeof translate !== \"number\") return;\n  var originPoint = mix(originAxis.min, originAxis.max, origin);\n  if (axis === originAxis) originPoint -= translate;\n  axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, _a, origin, sourceAxis) {\n  var _b = __read(_a, 3),\n    key = _b[0],\n    scaleKey = _b[1],\n    originKey = _b[2];\n  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n  removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\n  removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\n}\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };","map":{"version":3,"names":["__read","mix","percent","scalePoint","removePointDelta","point","translate","scale","originPoint","boxScale","undefined","removeAxisDelta","axis","origin","originAxis","sourceAxis","test","parseFloat","relativeProgress","min","max","removeAxisTransforms","transforms","_a","_b","key","scaleKey","originKey","xKeys","yKeys","removeBoxTransforms","box","originBox","sourceBox","x","y"],"sources":["C:/Users/hp/Desktop/JavaScript_fullstack_webDev/React/youtube/project2/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs"],"sourcesContent":["import { __read } from 'tslib';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate, scale, origin, boxScale, originAxis, sourceAxis) {\n    if (translate === void 0) { translate = 0; }\n    if (scale === void 0) { scale = 1; }\n    if (origin === void 0) { origin = 0.5; }\n    if (originAxis === void 0) { originAxis = axis; }\n    if (sourceAxis === void 0) { sourceAxis = axis; }\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        var relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    var originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, _a, origin, sourceAxis) {\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}