{"ast":null,"code":"var identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n  var xTranslate = delta.x.translate / treeScale.x;\n  var yTranslate = delta.y.translate / treeScale.y;\n  var transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n  /**\n   * Apply scale correction for the tree transform.\n   * This will apply scale to the screen-orientated axes.\n   */\n  transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n  if (latestTransform) {\n    var rotate = latestTransform.rotate,\n      rotateX = latestTransform.rotateX,\n      rotateY = latestTransform.rotateY;\n    if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n    if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n    if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n  }\n  /**\n   * Apply scale to match the size of the element to the size we want it.\n   * This will apply scale to the element-orientated axes.\n   */\n  var elementScaleX = delta.x.scale * treeScale.x;\n  var elementScaleY = delta.y.scale * treeScale.y;\n  transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n  return transform === identityProjection ? \"none\" : transform;\n}\nexport { buildProjectionTransform, identityProjection };","map":{"version":3,"names":["identityProjection","buildProjectionTransform","delta","treeScale","latestTransform","xTranslate","x","translate","yTranslate","y","transform","concat","rotate","rotateX","rotateY","elementScaleX","scale","elementScaleY"],"sources":["C:/Users/hp/Desktop/JavaScript_fullstack_webDev/React/youtube/project2/node_modules/framer-motion/dist/es/projection/styles/transform.mjs"],"sourcesContent":["var identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = delta.x.translate / treeScale.x;\n    var yTranslate = delta.y.translate / treeScale.y;\n    var transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\".concat(rotate, \"deg) \");\n        if (rotateX)\n            transform += \"rotateX(\".concat(rotateX, \"deg) \");\n        if (rotateY)\n            transform += \"rotateY(\".concat(rotateY, \"deg) \");\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    var elementScaleX = delta.x.scale * treeScale.x;\n    var elementScaleY = delta.y.scale * treeScale.y;\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n    return transform === identityProjection ? \"none\" : transform;\n}\n\nexport { buildProjectionTransform, identityProjection };\n"],"mappings":"AAAA,IAAIA,kBAAkB,GAAG,kDAAkD;AAC3E,SAASC,wBAAwBA,CAACC,KAAK,EAAEC,SAAS,EAAEC,eAAe,EAAE;EACjE;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,UAAU,GAAGH,KAAK,CAACI,CAAC,CAACC,SAAS,GAAGJ,SAAS,CAACG,CAAC;EAChD,IAAIE,UAAU,GAAGN,KAAK,CAACO,CAAC,CAACF,SAAS,GAAGJ,SAAS,CAACM,CAAC;EAChD,IAAIC,SAAS,GAAG,cAAc,CAACC,MAAM,CAACN,UAAU,EAAE,MAAM,CAAC,CAACM,MAAM,CAACH,UAAU,EAAE,SAAS,CAAC;EACvF;AACJ;AACA;AACA;EACIE,SAAS,IAAI,QAAQ,CAACC,MAAM,CAAC,CAAC,GAAGR,SAAS,CAACG,CAAC,EAAE,IAAI,CAAC,CAACK,MAAM,CAAC,CAAC,GAAGR,SAAS,CAACM,CAAC,EAAE,IAAI,CAAC;EACjF,IAAIL,eAAe,EAAE;IACjB,IAAIQ,MAAM,GAAGR,eAAe,CAACQ,MAAM;MAAEC,OAAO,GAAGT,eAAe,CAACS,OAAO;MAAEC,OAAO,GAAGV,eAAe,CAACU,OAAO;IACzG,IAAIF,MAAM,EACNF,SAAS,IAAI,SAAS,CAACC,MAAM,CAACC,MAAM,EAAE,OAAO,CAAC;IAClD,IAAIC,OAAO,EACPH,SAAS,IAAI,UAAU,CAACC,MAAM,CAACE,OAAO,EAAE,OAAO,CAAC;IACpD,IAAIC,OAAO,EACPJ,SAAS,IAAI,UAAU,CAACC,MAAM,CAACG,OAAO,EAAE,OAAO,CAAC;EACxD;EACA;AACJ;AACA;AACA;EACI,IAAIC,aAAa,GAAGb,KAAK,CAACI,CAAC,CAACU,KAAK,GAAGb,SAAS,CAACG,CAAC;EAC/C,IAAIW,aAAa,GAAGf,KAAK,CAACO,CAAC,CAACO,KAAK,GAAGb,SAAS,CAACM,CAAC;EAC/CC,SAAS,IAAI,QAAQ,CAACC,MAAM,CAACI,aAAa,EAAE,IAAI,CAAC,CAACJ,MAAM,CAACM,aAAa,EAAE,GAAG,CAAC;EAC5E,OAAOP,SAAS,KAAKV,kBAAkB,GAAG,MAAM,GAAGU,SAAS;AAChE;AAEA,SAAST,wBAAwB,EAAED,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}