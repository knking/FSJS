{"ast":null,"code":"import { mix } from 'popmotion';\nimport { complex } from 'style-value-types';\nimport { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\nvar varToken = \"_$css\";\nvar correctBoxShadow = {\n  correct: function (latest, _a) {\n    var treeScale = _a.treeScale,\n      projectionDelta = _a.projectionDelta;\n    var original = latest;\n    /**\n     * We need to first strip and store CSS variables from the string.\n     */\n    var containsCSSVariables = latest.includes(\"var(\");\n    var cssVariables = [];\n    if (containsCSSVariables) {\n      latest = latest.replace(cssVariableRegex, function (match) {\n        cssVariables.push(match);\n        return varToken;\n      });\n    }\n    var shadow = complex.parse(latest);\n    // TODO: Doesn't support multiple shadows\n    if (shadow.length > 5) return original;\n    var template = complex.createTransformer(latest);\n    var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n    // Calculate the overall context scale\n    var xScale = projectionDelta.x.scale * treeScale.x;\n    var yScale = projectionDelta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n    var averageScale = mix(xScale, yScale, 0.5);\n    // Blur\n    if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n    // Spread\n    if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n    var output = template(shadow);\n    if (containsCSSVariables) {\n      var i_1 = 0;\n      output = output.replace(varToken, function () {\n        var cssVariable = cssVariables[i_1];\n        i_1++;\n        return cssVariable;\n      });\n    }\n    return output;\n  }\n};\nexport { correctBoxShadow };","map":{"version":3,"names":["mix","complex","cssVariableRegex","varToken","correctBoxShadow","correct","latest","_a","treeScale","projectionDelta","original","containsCSSVariables","includes","cssVariables","replace","match","push","shadow","parse","length","template","createTransformer","offset","xScale","x","scale","yScale","y","averageScale","output","i_1","cssVariable"],"sources":["C:/Users/hp/Desktop/JavaScript_fullstack_webDev/React/youtube/project2/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs"],"sourcesContent":["import { mix } from 'popmotion';\nimport { complex } from 'style-value-types';\nimport { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\n\nvar varToken = \"_$css\";\nvar correctBoxShadow = {\n    correct: function (latest, _a) {\n        var treeScale = _a.treeScale, projectionDelta = _a.projectionDelta;\n        var original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */\n        var containsCSSVariables = latest.includes(\"var(\");\n        var cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, function (match) {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        var shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        var template = complex.createTransformer(latest);\n        var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        var xScale = projectionDelta.x.scale * treeScale.x;\n        var yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        var averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        var output = template(shadow);\n        if (containsCSSVariables) {\n            var i_1 = 0;\n            output = output.replace(varToken, function () {\n                var cssVariable = cssVariables[i_1];\n                i_1++;\n                return cssVariable;\n            });\n        }\n        return output;\n    },\n};\n\nexport { correctBoxShadow };\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,WAAW;AAC/B,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,gBAAgB,QAAQ,qDAAqD;AAEtF,IAAIC,QAAQ,GAAG,OAAO;AACtB,IAAIC,gBAAgB,GAAG;EACnBC,OAAO,EAAE,SAAAA,CAAUC,MAAM,EAAEC,EAAE,EAAE;IAC3B,IAAIC,SAAS,GAAGD,EAAE,CAACC,SAAS;MAAEC,eAAe,GAAGF,EAAE,CAACE,eAAe;IAClE,IAAIC,QAAQ,GAAGJ,MAAM;IACrB;AACR;AACA;IACQ,IAAIK,oBAAoB,GAAGL,MAAM,CAACM,QAAQ,CAAC,MAAM,CAAC;IAClD,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIF,oBAAoB,EAAE;MACtBL,MAAM,GAAGA,MAAM,CAACQ,OAAO,CAACZ,gBAAgB,EAAE,UAAUa,KAAK,EAAE;QACvDF,YAAY,CAACG,IAAI,CAACD,KAAK,CAAC;QACxB,OAAOZ,QAAQ;MACnB,CAAC,CAAC;IACN;IACA,IAAIc,MAAM,GAAGhB,OAAO,CAACiB,KAAK,CAACZ,MAAM,CAAC;IAClC;IACA,IAAIW,MAAM,CAACE,MAAM,GAAG,CAAC,EACjB,OAAOT,QAAQ;IACnB,IAAIU,QAAQ,GAAGnB,OAAO,CAACoB,iBAAiB,CAACf,MAAM,CAAC;IAChD,IAAIgB,MAAM,GAAG,OAAOL,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC;IAClD;IACA,IAAIM,MAAM,GAAGd,eAAe,CAACe,CAAC,CAACC,KAAK,GAAGjB,SAAS,CAACgB,CAAC;IAClD,IAAIE,MAAM,GAAGjB,eAAe,CAACkB,CAAC,CAACF,KAAK,GAAGjB,SAAS,CAACmB,CAAC;IAClDV,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIC,MAAM;IAC5BN,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAII,MAAM;IAC5B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAIE,YAAY,GAAG5B,GAAG,CAACuB,MAAM,EAAEG,MAAM,EAAE,GAAG,CAAC;IAC3C;IACA,IAAI,OAAOT,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,KAAK,QAAQ,EACtCL,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIM,YAAY;IACtC;IACA,IAAI,OAAOX,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,KAAK,QAAQ,EACtCL,MAAM,CAAC,CAAC,GAAGK,MAAM,CAAC,IAAIM,YAAY;IACtC,IAAIC,MAAM,GAAGT,QAAQ,CAACH,MAAM,CAAC;IAC7B,IAAIN,oBAAoB,EAAE;MACtB,IAAImB,GAAG,GAAG,CAAC;MACXD,MAAM,GAAGA,MAAM,CAACf,OAAO,CAACX,QAAQ,EAAE,YAAY;QAC1C,IAAI4B,WAAW,GAAGlB,YAAY,CAACiB,GAAG,CAAC;QACnCA,GAAG,EAAE;QACL,OAAOC,WAAW;MACtB,CAAC,CAAC;IACN;IACA,OAAOF,MAAM;EACjB;AACJ,CAAC;AAED,SAASzB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}