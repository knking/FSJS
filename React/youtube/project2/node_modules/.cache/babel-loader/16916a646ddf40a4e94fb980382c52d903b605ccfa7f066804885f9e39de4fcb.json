{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.mjs';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.mjs';\nimport { isTransformProp } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n  treeType: \"dom\",\n  readValueFromInstance: function (domElement, key) {\n    if (isTransformProp(key)) {\n      var defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    } else {\n      var computedStyle = getComputedStyle(domElement);\n      return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n    }\n  },\n  sortNodePosition: function (a, b) {\n    /**\n     * compareDocumentPosition returns a bitmask, by using the bitwise &\n     * we're returning true if 2 in that bitmask is set to true. 2 is set\n     * to true if b preceeds a.\n     */\n    return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n  },\n  getBaseTarget: function (props, key) {\n    var _a;\n    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n  },\n  measureViewportBox: function (element, _a) {\n    var transformPagePoint = _a.transformPagePoint;\n    return measureViewportBox(element, transformPagePoint);\n  },\n  /**\n   * Reset the transform on the current Element. This is called as part\n   * of a batched process across the entire layout tree. To remove this write\n   * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n   * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n   * works\n   */\n  resetTransform: function (element, domElement, props) {\n    var transformTemplate = props.transformTemplate;\n    domElement.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    // Ensure that whatever happens next, we restore our transform on the next frame\n    element.scheduleRender();\n  },\n  restoreTransform: function (instance, mutableState) {\n    instance.style.transform = mutableState.style.transform;\n  },\n  removeValueFromRenderState: function (key, _a) {\n    var vars = _a.vars,\n      style = _a.style;\n    delete vars[key];\n    delete style[key];\n  },\n  /**\n   * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n   * can be animated by Motion.\n   */\n  makeTargetAnimatable: function (element, _a, _b, isMounted) {\n    var transformValues = _b.transformValues;\n    if (isMounted === void 0) {\n      isMounted = true;\n    }\n    var transition = _a.transition,\n      transitionEnd = _a.transitionEnd,\n      target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n    var origin = getOrigin(target, transition || {}, element);\n    /**\n     * If Framer has provided a function to convert `Color` etc value types, convert them\n     */\n    if (transformValues) {\n      if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n      if (target) target = transformValues(target);\n      if (origin) origin = transformValues(origin);\n    }\n    if (isMounted) {\n      checkTargetForNewValues(element, target, origin);\n      var parsed = parseDomVariant(element, target, origin, transitionEnd);\n      transitionEnd = parsed.transitionEnd;\n      target = parsed.target;\n    }\n    return __assign({\n      transition: transition,\n      transitionEnd: transitionEnd\n    }, target);\n  },\n  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n  build: function (element, renderState, latestValues, options, props) {\n    if (element.isVisible !== undefined) {\n      renderState.style.visibility = element.isVisible ? \"visible\" : \"hidden\";\n    }\n    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n  },\n  render: renderHTML\n};\nvar htmlVisualElement = visualElement(htmlConfig);\nexport { getComputedStyle, htmlConfig, htmlVisualElement };","map":{"version":3,"names":["__rest","__assign","visualElement","getOrigin","checkTargetForNewValues","buildHTMLStyles","isCSSVariable","parseDomVariant","isTransformProp","scrapeMotionValuesFromProps","renderHTML","getDefaultValueType","measureViewportBox","getComputedStyle","element","window","htmlConfig","treeType","readValueFromInstance","domElement","key","defaultType","default","computedStyle","getPropertyValue","sortNodePosition","a","b","compareDocumentPosition","getBaseTarget","props","_a","style","transformPagePoint","resetTransform","transformTemplate","transform","scheduleRender","restoreTransform","instance","mutableState","removeValueFromRenderState","vars","makeTargetAnimatable","_b","isMounted","transformValues","transition","transitionEnd","target","origin","parsed","build","renderState","latestValues","options","isVisible","undefined","visibility","render","htmlVisualElement"],"sources":["C:/Users/hp/Desktop/JavaScript_fullstack_webDev/React/youtube/project2/node_modules/framer-motion/dist/es/render/html/visual-element.mjs"],"sourcesContent":["import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.mjs';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.mjs';\nimport { isTransformProp } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function (domElement, key) {\n        if (isTransformProp(key)) {\n            var defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            var computedStyle = getComputedStyle(domElement);\n            return ((isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0);\n        }\n    },\n    sortNodePosition: function (a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function (props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function (element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return measureViewportBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */\n    resetTransform: function (element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function (instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function (key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */\n    makeTargetAnimatable: function (element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) { isMounted = true; }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n        var origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return __assign({ transition: transition, transitionEnd: transitionEnd }, target);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (element, renderState, latestValues, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible\n                ? \"visible\"\n                : \"hidden\";\n        }\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    },\n    render: renderHTML,\n};\nvar htmlVisualElement = visualElement(htmlConfig);\n\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}