{"ast":null,"code":"import { __read } from 'tslib';\nimport { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs';\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nvar prefersReducedMotion = {\n  current: null\n};\nvar hasDetected = false;\nfunction initPrefersReducedMotion() {\n  hasDetected = true;\n  if (!isBrowser) return;\n  if (window.matchMedia) {\n    var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n    var setReducedMotionPreferences = function () {\n      return prefersReducedMotion.current = motionMediaQuery_1.matches;\n    };\n    motionMediaQuery_1.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.current = false;\n  }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n  /**\n   * Lazy initialisation of prefersReducedMotion\n   */\n  !hasDetected && initPrefersReducedMotion();\n  var _a = __read(useState(prefersReducedMotion.current), 1),\n    shouldReduceMotion = _a[0];\n  /**\n   * TODO See if people miss automatically updating shouldReduceMotion setting\n   */\n  return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n  var reducedMotionPreference = useReducedMotion();\n  var reducedMotion = useContext(MotionConfigContext).reducedMotion;\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\nexport { useReducedMotion, useReducedMotionConfig };","map":{"version":3,"names":["__read","useState","useContext","MotionConfigContext","isBrowser","prefersReducedMotion","current","hasDetected","initPrefersReducedMotion","window","matchMedia","motionMediaQuery_1","setReducedMotionPreferences","matches","addListener","useReducedMotion","_a","shouldReduceMotion","useReducedMotionConfig","reducedMotionPreference","reducedMotion"],"sources":["C:/Users/hp/Desktop/JavaScript_fullstack_webDev/React/youtube/project2/node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs"],"sourcesContent":["import { __read } from 'tslib';\nimport { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs';\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nvar prefersReducedMotion = { current: null };\nvar hasDetected = false;\nfunction initPrefersReducedMotion() {\n    hasDetected = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n        var setReducedMotionPreferences = function () {\n            return (prefersReducedMotion.current = motionMediaQuery_1.matches);\n        };\n        motionMediaQuery_1.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */\n    !hasDetected && initPrefersReducedMotion();\n    var _a = __read(useState(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */\n    return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n    var reducedMotionPreference = useReducedMotion();\n    var reducedMotion = useContext(MotionConfigContext).reducedMotion;\n    if (reducedMotion === \"never\") {\n        return false;\n    }\n    else if (reducedMotion === \"always\") {\n        return true;\n    }\n    else {\n        return reducedMotionPreference;\n    }\n}\n\nexport { useReducedMotion, useReducedMotionConfig };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC5C,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,SAAS,QAAQ,kBAAkB;;AAE5C;AACA,IAAIC,oBAAoB,GAAG;EAAEC,OAAO,EAAE;AAAK,CAAC;AAC5C,IAAIC,WAAW,GAAG,KAAK;AACvB,SAASC,wBAAwBA,CAAA,EAAG;EAChCD,WAAW,GAAG,IAAI;EAClB,IAAI,CAACH,SAAS,EACV;EACJ,IAAIK,MAAM,CAACC,UAAU,EAAE;IACnB,IAAIC,kBAAkB,GAAGF,MAAM,CAACC,UAAU,CAAC,0BAA0B,CAAC;IACtE,IAAIE,2BAA2B,GAAG,SAAAA,CAAA,EAAY;MAC1C,OAAQP,oBAAoB,CAACC,OAAO,GAAGK,kBAAkB,CAACE,OAAO;IACrE,CAAC;IACDF,kBAAkB,CAACG,WAAW,CAACF,2BAA2B,CAAC;IAC3DA,2BAA2B,EAAE;EACjC,CAAC,MACI;IACDP,oBAAoB,CAACC,OAAO,GAAG,KAAK;EACxC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,gBAAgBA,CAAA,EAAG;EACxB;AACJ;AACA;EACI,CAACR,WAAW,IAAIC,wBAAwB,EAAE;EAC1C,IAAIQ,EAAE,GAAGhB,MAAM,CAACC,QAAQ,CAACI,oBAAoB,CAACC,OAAO,CAAC,EAAE,CAAC,CAAC;IAAEW,kBAAkB,GAAGD,EAAE,CAAC,CAAC,CAAC;EACtF;AACJ;AACA;EACI,OAAOC,kBAAkB;AAC7B;AACA,SAASC,sBAAsBA,CAAA,EAAG;EAC9B,IAAIC,uBAAuB,GAAGJ,gBAAgB,EAAE;EAChD,IAAIK,aAAa,GAAGlB,UAAU,CAACC,mBAAmB,CAAC,CAACiB,aAAa;EACjE,IAAIA,aAAa,KAAK,OAAO,EAAE;IAC3B,OAAO,KAAK;EAChB,CAAC,MACI,IAAIA,aAAa,KAAK,QAAQ,EAAE;IACjC,OAAO,IAAI;EACf,CAAC,MACI;IACD,OAAOD,uBAAuB;EAClC;AACJ;AAEA,SAASJ,gBAAgB,EAAEG,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}